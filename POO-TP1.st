Object subclass: #AdministradorFiesta	instanceVariableNames: 'colBebedor colBares'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!AdministradorFiesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colBares:		<Object>	colBebedor:		<Object>    Implementation Points!!AdministradorFiesta methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 15:33'!calcularPorcentaje:nombreCerveza|cont cont1 porcent c|c:=100.cont:=0.cont1:=0.colBares do:[:cadaBar|(cadaBar sirveCerveza:nombreCerveza) 	ifTrue:[cont1:=cont1+1].	cont:=cont+1].porcent:=(cont1/cont)*c.^porcent ! !!AdministradorFiesta methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 15:12'!cervezaPreferia:unBebedor nombreCerveza:nombreCerveza|rta|rta := unBebedor esPreferida:nombreCerveza.^rta.! !!AdministradorFiesta methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 14:53'!inicializarAdministradorFiestacolBares:=OrderedCollection new.colBebedor:=OrderedCollection new.! !!AdministradorFiesta methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 15:43'!getColBebedores^colBebedor ! !!AdministradorFiesta methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 15:44'!getColBares^colBares ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AdministradorFiesta class	instanceVariableNames: ''!!AdministradorFiesta class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 14:54'!crearAdministrador|unAdministrador|unAdministrador:=self new.unAdministrador inicializarAdministradorFiesta .^unAdministrador ! !Object subclass: #AdministradorPinacoteca	instanceVariableNames: 'colAutor colPinacoteca'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!AdministradorPinacoteca commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colAutor:		<Object>	colPinacoteca:		<Object>    Implementation Points!!AdministradorPinacoteca methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 16:38'!inicializarAdministradorPinacotecacolAutor :=OrderedCollection new.colPinacoteca := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AdministradorPinacoteca class	instanceVariableNames: ''!!AdministradorPinacoteca class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 16:39'!crearAdministradorPinacoteca|unAdmin|unAdmin:= self new.unAdmin inicializarAdministradorPinacoteca .^unAdmin! !Object subclass: #Alquiler	instanceVariableNames: 'unBarco unCliente fechaini fechaFinal posicionAmarre monto'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Alquiler commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	fechaFinal:		<Object>	fechaini:		<Object>	monto:		<Object>	posicionAmarre:		<Object>	unBarco:		<Object>	unCliente:		<Object>    Implementation Points!!Alquiler methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 13:11'!inicializarAlquiler:unbarco cliente:unCliente fechaini:unaFechaIni fechaFinal:unaFechaFin posicionAmarre:unaPosicionAmarre monto:unMontounBarco:=unbarco.Cliente:=unCliente.fechaini:=unaFechaIni.fechaFinal:=unaFechaFin.posicionAmarre:=unaPosicionAmarre.monto:=unMonto.! !!Alquiler methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 13:45'!inicializarAlquiler:unbarco cliente:uncliente fechaini:unaFechaIni fechaFinal:unaFechaFin posicionAmarre:unaPosicionAmarreunBarco:=unbarco.unCliente:=uncliente.fechaini:=Date today.fechaFinal:=unaFechaFin asDate.posicionAmarre:=unaPosicionAmarre.! !!Alquiler methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 13:47'!calcularValorAlquiler:unValorBase|unMonto dias unModulo|unModulo := unBarco obtenerModulo.dias:= fechaFinal subtractDate: fechaini.unMonto:= (unModulo * dias) + unValorBase.^unMonto. ! !!Alquiler methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 13:35'!getCliente^unCliente.! !!Alquiler methodsFor: 'Modificadores' stamp: 'Fabio 6/26/2018 14:32'!setMonto:unMontomonto := unMonto.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Alquiler class	instanceVariableNames: ''!!Alquiler class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 13:23'!crearAlquiler:unBarco cliente:unCLiente fechaini:unaFechaIni fechaFin:unaFechaFin posicionAmarre:unaPosicionAmarre|unAlquiler|unAlquiler :=self new.unAlquiler inicializarAlquiler: unBarco cliente:unCLiente  fechaini:unaFechaIni  fechaFinal:unaFechaFin  posicionAmarre:unaPosicionAmarre. ^unAlquiler ! !Object subclass: #Auto	instanceVariableNames: 'matricula marca modelo color kmActual'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Auto commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	color:		<Object>	kmActual:		<Object>	marca:		<Object>	matricula:		<Object>	modelo:		<Object>    Implementation Points!!Auto methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 12:10'!inicializar:unaMatricula marca:unaMarca modelo:unModelo color:unColor kmActual:unKmActualmatricula:=unaMatricula.marca:=unaMarca.modelo:=unModelo.color:=unColor.kmActual:=unKmActual.! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:23'!setMarca:unaMarcamarca:=unaMarca.! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:23'!setModelo:unModelomodelo:=unModelo.! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:30'!andarKm:nkmActual:=(kmActual+n).! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:23'!setColor:unColorcolor:=unColor.! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:22'!setMatricula:unaMatriculamatricula:=unaMatricula.! !!Auto methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:24'!setKmActual:unKmActualkmActual:=unKmActual.! !!Auto methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:19'!getMarca^marca ! !!Auto methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:20'!getModelo^modelo  ! !!Auto methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:20'!getColor^color  ! !!Auto methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:20'!getMatricula^matricula ! !!Auto methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:21'!getKmActual^kmActual   ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Auto class	instanceVariableNames: ''!!Auto class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 12:11'!crearAuto:unaMatricula marca: unaMarca modelo:unModelo color:unColor kmActual:unKmActual|auto|auto:=self new.auto inicializar: unaMatricula marca:unaMarca  modelo:unModelo  color:unColor  kmActual:unKmActual. ^auto.! !Object subclass: #Autor	instanceVariableNames: 'nombre apellido ciudad paisNacimiento fechaNac colCuadro'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!Object subclass: #Bar	instanceVariableNames: 'colCervezas nombre ubicacion colBebedores'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Bar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colCervezas:		<Object>	nombre:		<Object>	ubicacion:		<Object>    Implementation Points!!Bar methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 15:38'!sirveCerveza:nombreCerveza|resp|resp:=colCervezas detect:[:cadaCerveza|cadaCerveza sirveCer:nombreCerveza ].^resp! !!Bar methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 15:08'!inicializarBar:unNombre ubicacion:unaUbicacioncolCervezas:=OrderedCollection new.colBebedores :=OrderedCollection new.nombre:=unNombre.ubicacion:=unaUbicacion.! !!Bar methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 15:55'!getColCervezas^colCervezas ! !!Bar methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 15:54'!getColBebedor^colBebedores! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bar class	instanceVariableNames: ''!!Bar class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 14:58'!crearBar:unNombre ubicacion:unaUbicacion|unBar|unBar:=self new.unBar inicializarBar: unNombre  ubicacion:unaUbicacion.^unBar ! !Object subclass: #Barco	instanceVariableNames: 'matricula eslora añoFabricacion'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Barco commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	añoFabricacion:		<Object>	eslora:		<Object>	matricula:		<Object>    Implementation Points!!Barco methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 13:16'!obtenerModulo|unModulo c|c:= 10.unModulo := (eslora * c).^unModulo.! !!Barco methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 13:01'!inicializarBarco: unaMatricula eslora:unaEslora añoFabricacion:unAñomatricula := unaMatricula .eslora := unaEslora .añoFabricacion := unAño .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Barco class	instanceVariableNames: ''!!Barco class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 12:59'!crearBarco: unaMatricula eslora:unaEslora añoFabricacion:unAño|unBarco|unBarco := self new.unBarco inicializarBarco: unaMatricula eslora:unaEslora añoFabricacion:unAño.^unBarco.! !Object subclass: #Bebedor	instanceVariableNames: 'nombre apellido lugarPrecedencia cervezaF'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Bebedor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	cervezaF:		<Object>	lugarPrecedencia:		<Object>	nombre:		<Object>    Implementation Points!!Bebedor methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 15:05'!inicializarBebedor:unNombre apellido:unApellido lugarPrecedencia:unLugarP cervezaF:unaCervezaFnombre:=unNombre.apellido:=unApellido.lugarPrecedencia:=unLugarP.cervezaF:=unaCervezaF.! !!Bebedor methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 15:21'!esPreferida:nombreCerveza|resp|resp:=cervezaF==nombreCerveza.^resp! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bebedor class	instanceVariableNames: ''!!Bebedor class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 15:07'!crearBebedor:unNombre apellido:unApellido lugarPrecedencia:unLugarP cerveza:unaCerveza|unbebedor|unbebedor :=self new.unbebedor inicializarBebedor: unNombre apellido:unApellido  lugarPrecedencia:unLugarP  cervezaF:unaCerveza.^unbebedor ! !Object subclass: #CamionN	instanceVariableNames: 'matricula tipo kmActual kmService tara'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!CamionN commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	kmActual:		<Object>	kmService:		<Object>	matricula:		<Object>	tara:		<Object>	tipo:		<Object>    Implementation Points!!CamionN methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 14:19'!verificarTara:n(n>tara)ifTrue:[Transcript show: 'valorSuperado']ifFalse:[Transcript show:'valor no superado'].! !!CamionN methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 13:28'!verificarService^(kmActual>=kmService )! !!CamionN methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:42'!getKmService^kmService ! !!CamionN methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:42'!getTara^tara! !!CamionN methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:41'!getTipo^tipo! !!CamionN methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:41'!getMatricula^matricula ! !!CamionN methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 12:41'!getKmActual^kmActual ! !!CamionN methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:44'!setTipo:unTipotipo:=unTipo.! !!CamionN methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:45'!setKmService:unKmServicekmService:=unKmService.! !!CamionN methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:45'!setTara:unTaratara:=unTara.! !!CamionN methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:43'!setMatricula:unaMatriculamatricula:=unaMatricula.! !!CamionN methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 12:44'!setKmActual:unkmActualkmActual:=unkmActual.! !!CamionN methodsFor: 'inicializador' stamp: 'Fabio 6/24/2018 12:49'!inicializarCamion:unaMatricula tipo:unTipo kmActual:unKmActual kmService:unKmService tara:unTaramatricula:=unaMatricula.tipo:=unTipo.kmActual:=unKmActual.kmService:=unKmService.tara:=unTara.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CamionN class	instanceVariableNames: ''!!CamionN class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 12:50'!CrearCamion:unaMatricula tipo:unTipo kmActual:unKmActual kmService:unKmservice tara:unTara|camion|camion:= self new.camion inicializarCamion: unaMatricula tipo:unTipo  kmActual:unKmActual  kmService:unKmservice   tara:unTara. ^camion.! !Object subclass: #Cerveza	instanceVariableNames: 'tipo'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Cerveza commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	tipo:		<Object>    Implementation Points!!Cerveza methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 15:39'!sirveCer:nombreCerveza|resp|resp:=tipo==nombreCerveza.^resp! !!Cerveza methodsFor: 'Inicializador' stamp: 'Fabio 6/26/2018 15:01'!inicializarCerveza:unTipotipo:=unTipo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cerveza class	instanceVariableNames: ''!!Cerveza class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 15:03'!crearCerveza:unTipo|unaCerveza|unaCerveza :=self new.unaCerveza inicializarCerveza: unTipo.^unaCerveza ! !Object subclass: #Cliente	instanceVariableNames: 'dni nombre apellido telefono datosTarjeta fechaVenc'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Cliente commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	datosTarjeta:		<Object>	dni:		<Object>	fechaVenc:		<Object>	nombre:		<Object>	telefono:		<Object>    Implementation Points!!Cliente methodsFor: 'Inicializador' stamp: 'Fabio 6/25/2018 15:24'!inicializarCliente:unDni nombre:unNombre apellido:unApellido telefono:unTelefono datosTarjeta:unDato fechaVenc:unaFechaVencdni:=unDni.nombre:=unNombre.apellido:=unApellido.telefono:=unTelefono.datosTarjeta:=unDato.fechaVenc:=unaFechaVenc asDate  .! !!Cliente methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 15:18'!verificarVencimiento^fechaVenc subtractDate: Date today ! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:09'!getApellido^apellido! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:20'!getFechaVenc^fechaVenc! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:09'!getNombre^nombre ! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:20'!getDatosTarjeta^datosTarjeta ! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:09'!getDni^dni! !!Cliente methodsFor: 'visualizadores' stamp: 'Fabio 6/24/2018 15:19'!getTelefono^telefono ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cliente class	instanceVariableNames: ''!!Cliente class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 15:07'!crearCliente:unDni nombre:unNombre apellido:unApellido telefono:unTelefono datosTarjeta:unDato fechaVenc:unaFechaVenc|cliente|cliente:=self new.cliente inicializarCliente: unDni nombre:unNombre  apellido:unApellido  telefono:unTelefono  datosTarjeta: unDato fechaVenc: unaFechaVenc.^cliente.! !Object subclass: #ClienteN	instanceVariableNames: 'nombre apellido Dni nroMovil direccionElectronica'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!ClienteN commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	Dni:		<Object>	apellido:		<Object>	direccionElectronica:		<Object>	nombre:		<Object>	nroMovil:		<Object>    Implementation Points!!ClienteN methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 13:32'!getNombre^nombre.! !!ClienteN methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 00:31'!inicializarClienteN:unNombre apellido:unApellido Dni:unDni nroMovil:unNroMovil direccionElectronica:unaDireccionElectronicanombre:=unNombre.apellido:=unApellido.Dni:=unDni.nroMovil:=unNroMovil.direccionElectronica:=unaDireccionElectronica.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClienteN class	instanceVariableNames: ''!!ClienteN class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 00:33'!crearClienteN:unNombre apellido:unApellido Dni:unDni nroMovil:unNroMovil direccionElectronica:unaDireccionElectronica|unCliente|unCliente := self new.unCliente inicializarClienteN: unNombre apellido:unApellido  Dni:unDni  nroMovil:unNroMovil   direccionElectronica: unaDireccionElectronica.^unCliente ! !Object subclass: #Cuadro	instanceVariableNames: 'codigo nombre dimensiones fechaP tecnica genero'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Cuadro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	codigo:		<Object>	dimensiones:		<Object>	fechaP:		<Object>	genero:		<Object>	nombre:		<Object>	tecnica:		<Object>    Implementation Points!!Cuadro methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 17:18'!verificarCondicion:unaTecnica genero:unGenero|unCuadro|unCuadro := nil.((tecnica=unaTecnica) & (genero=unGenero))ifTrue:[unCuadro := self.].^unCuadro! !!Cuadro methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 17:16'!verificarCondicion:unaTecnica genero:unGenero año:unaFecha|unCuadro|unCuadro := nil.((tecnica==unaTecnica) & (genero=unGenero) & (fechaP<=unaFecha) )ifTrue:[unCuadro := self.].^unCuadro! !!Cuadro methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 17:10'!inicializarCuadro:unaTecnica genero:unGenero fecha:unaFechatecnica := unaTecnica.genero:= unGenero .fechaP := unaFecha asDate.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cuadro class	instanceVariableNames: ''!!Cuadro class methodsFor: 'constructor' stamp: 'Fabio 6/26/2018 16:51'!crearCuadro:unaTecnica genero:unGenero fecha:unaFecha|unCuadro|unCuadro := self new.unCuadro inicializarCuadro: unaTecnica genero:unGenero  fecha: unaFecha.^unCuadro.! !Object subclass: #Pinacoteca	instanceVariableNames: 'colCuadro nombre ciudad direccion'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Pinacoteca commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ciudad:		<Object>	colCuadro:		<Object>	direccion:		<Object>	nombre:		<Object>    Implementation Points!!Pinacoteca methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 17:17'!generarListado:unaTecnica genero:unGenero |colGenerada|colGenerada := OrderedCollection new.colCuadro do:[:elem| (elem verificarCondicion: unaTecnica genero:unGenero )	ifNotNil:[colGenerada add:elem].].^colGenerada.! !!Pinacoteca methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 17:06'!generarListado:unaTecnica genero:unGenero fecha:unaFecha|colGenerada|colGenerada := OrderedCollection new.colCuadro do:[:elem| (elem verificarCondicion: unaTecnica genero:unGenero  año:unaFecha)	ifNotNil:[colGenerada add:elem].].^colGenerada.! !!Pinacoteca methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 17:11'!getColCuadro^colCuadro ! !!Pinacoteca methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 16:46'!inicializarPina:unNombre ciudad:unaCiudad direccion:unaDireccionnombre:=unNombre.ciudad :=unaCiudad .direccion:=unaDireccion.colCuadro := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pinacoteca class	instanceVariableNames: ''!!Pinacoteca class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 16:43'!crearPinacoteca:unNombre ciudad:unaCiudad direccion:unaDireccion|unaPina|unaPina := self new.unaPina inicializarPina:unNombre ciudad:unaCiudad direccion:unaDireccion.^unaPina.! !Object subclass: #Puerto	instanceVariableNames: 'valorBase ciudad colAlquileres colAmarres'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Puerto commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ciudad:		<Object>	colAlquileres:		<Object>	colBarcos:		<Object>	colClientes:		<Object>	valorBase:		<Object>    Implementation Points!!Puerto methodsFor: 'inicializador' stamp: 'Fabio 6/26/2018 14:09'!inicializarPuerto:unValorBase ciudad:unaCiudadvalorBase :=unValorBase .ciudad := unaCiudad.colAlquileres := OrderedCollection new.colAmarres := OrderedCollection new.self llenarAmarres.! !!Puerto methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 14:06'!llenarAmarrescolAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.colAmarres add:'libre'.! !!Puerto methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 14:13'!buscarAmarre|unAmarre|unAmarre := colAmarres detect: [:elem| elem='libre'.].^unAmarre.! !!Puerto methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 14:24'!calcularValorAlquiler|valorAquiler|valorAquiler := self calcularValorAlquiler:valorBase.^valorAquiler .! !!Puerto methodsFor: 'aplicacion' stamp: 'Fabio 6/26/2018 14:38'!registrarAlquiler:unBarco cliente:unCliente fechaFin:unFechaFin|unMonto alquilerNuevo nroAmarre|nroAmarre := self buscarAmarre.alquilerNuevo := Alquiler crearAlquiler: unBarco cliente:unCliente  fechaini:Date today  fechaFin:unFechaFin  posicionAmarre: nroAmarre.colAlquileres add: alquilerNuevo.unMonto := alquilerNuevo calcularValorAlquiler: valorBase. alquilerNuevo setMonto:unMonto.! !!Puerto methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 13:41'!getColAlquiler^colAlquileres ! !!Puerto methodsFor: 'visualizadores' stamp: 'Fabio 6/26/2018 14:16'!getColAmarres^colAmarres ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Puerto class	instanceVariableNames: 'valorBase'!!Puerto class methodsFor: 'Constructor' stamp: 'Fabio 6/26/2018 13:04'!crearPuerto:unValorBase ciudad:unaCiudad|unPuerto|unPuerto := self new.unPuerto inicializarPuerto:unValorBase ciudad:unaCiudad.^unPuerto.! !Object subclass: #Vagon	instanceVariableNames: 'anioInstalacion largo ancho peso cantPasajeros'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-TP1'!!Vagon commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ancho:		<Object>	anioInstalacion:		<Object>	cantPasajeros:		<Object>	largo:		<Object>	peso:		<Object>    Implementation Points!!Vagon methodsFor: 'Inicializador' stamp: 'Fabio 6/25/2018 16:45'!inicializarVagon:unAnioInstalacion largo:unLargo ancho:unAncho cantPasajeros:unCantPasajeroanioInstalacion:=unAnioInstalacion asDate .largo:=unLargo.ancho:=unAncho.peso:=(unCantPasajero*80).cantPasajeros:=unCantPasajero.! !!Vagon methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 15:37'!getAnioInstalacion^anioInstalacion ! !!Vagon methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 15:38'!getLargo^largo ! !!Vagon methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 15:49'!getPeso^peso! !!Vagon methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 15:38'!getAncho^ancho! !!Vagon methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 15:39'!getCantPasajeros^cantPasajeros ! !!Vagon methodsFor: 'Modificadores' stamp: 'Fabio 6/25/2018 15:41'!setCantPasajero:unCantPasajerocantPasajeros:=unCantPasajero.! !!Vagon methodsFor: 'Modificadores' stamp: 'Fabio 6/25/2018 15:40'!setAnioInstalacion:unAnioInstalacionanioInstalacion:=unAnioInstalacion.! !!Vagon methodsFor: 'Modificadores' stamp: 'Fabio 6/25/2018 15:40'!setLargo:unLargolargo:=unLargo ! !!Vagon methodsFor: 'Modificadores' stamp: 'Fabio 6/25/2018 15:41'!setAncho:unAnchoancho:=unAncho! !!Vagon methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 16:39'!actualizarPeso:kpeso:=cantPasajeros *k.! !!Vagon methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 21:47'!verificarAntiguedad^(anioInstalacion subtractDate: Date today) years.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vagon class	instanceVariableNames: ''!!Vagon class methodsFor: 'Constructor' stamp: 'Fabio 6/25/2018 16:41'!crearVagon:unAnioinstalacion largo:unLargo ancho:unAncho  cantPasajero:unCantPasajero|unVagon|unVagon:=self new.unVagon inicializarVagon: unAnioinstalacion largo:unLargo  ancho:unAncho  cantPasajeros:unCantPasajero.^unVagon ! !